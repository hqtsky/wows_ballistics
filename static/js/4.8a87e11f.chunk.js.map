{"version":3,"sources":["components/SettingsBar/SettingsRadio.tsx","components/SettingsBar/SettingsBarInternal.tsx"],"names":["SettingsRadio","React","memo","options","values","defaultValue","onChange","useState","indexOf","value","setValue","onChangeInternal","event","parseInt","target","ToggleButtonGroup","toggle","vertical","type","name","map","option","i","ToggleButton","key","className","CommonRadioFormat","children","Row","style","paddingLeft","paddingRight","paddingBottom","Col","sm","PositionRadio","format","settings","legendPosition","CalculationRadio","calculationSettings","calculationMethod","SettingsBarInternal","titles","forms","Object","freeze","graphs","distance","calculations","launchAngle","numericalMethod","colors","line","defaultFormStyle","formLabel","display","padding","formControl","minWidth","maxWidth","inputGroup","inputGroupAppend","formGroup","marginBottom","generateForms","rendered","Fragment","controlId","newValue","String","append","labelWidth","ariaLabel","width","gridTemplateColumns","onlineChange","id","props","parseFloat","generateLineForms","handleGraphChange","numValue","undefined","generateGraphForm","handleCalculationChange","generateLaunchAngleForm","handleNumericalMethodChange","timeStep","generateNumericalMethodForm","handleRoundingChange","rounding","generateFormatForms","onShortNameChange","checked","shortNames","onShowLineChange","showLine","handleColorChange","numValues","updateColors","generateColorFormsInternal","rowGroup","j","rowLabel","row","form","label","generateColorForms","this","onlabel","offlabel","onstyle","offstyle","PureComponent"],"mappings":"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","file":"static/js/4.8a87e11f.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport {ToggleButtonGroup, ToggleButton, Row, Col} from 'react-bootstrap';\r\n\r\ninterface settingsRadioProps{\r\n    options: string[], values: (string|number)[], defaultValue: string|number, onChange: Function\r\n}\r\n\r\nexport const SettingsRadio: React.FunctionComponent<settingsRadioProps> = React.memo((\r\n    {options, values, defaultValue, onChange} : settingsRadioProps) => {\r\n    const [value, setValue] = useState(() => {\r\n        return values.indexOf(defaultValue)\r\n    });\r\n    const onChangeInternal = event => {\r\n        const value = parseInt(event.target.value);\r\n        setValue(value);\r\n        onChange(values[value]);\r\n    }\r\n    return (\r\n        <ToggleButtonGroup toggle vertical \r\n            type=\"radio\" name=\"radio\" \r\n            value={value}\r\n        >\r\n            {options.map((option, i) => {\r\n                return (\r\n                <ToggleButton key={i} value={i} \r\n                    onChange={onChangeInternal} \r\n                    type=\"radio\" \r\n                    className=\"btn-custom-blue\"\r\n                >\r\n                    {option}\r\n                </ToggleButton>);\r\n            })}\r\n        </ToggleButtonGroup>\r\n    ) \r\n});\r\n\r\nexport const CommonRadioFormat = React.memo(({children}) => {\r\n    return(\r\n        <Row className=\"justify-content-md-center\" \r\n        style={{paddingLeft: '1rem', paddingRight: '1rem', paddingBottom: '.5rem'}}>\r\n            <Col sm=\"10\">{children}</Col>\r\n        </Row>\r\n    );\r\n});","import React from 'react';\r\nimport BootstrapSwitchButton from 'bootstrap-switch-button-react';\r\n\r\nimport * as T from '../commonTypes';\r\nimport {ParameterForm} from '../UtilityComponents';\r\nimport {SettingsRadio, CommonRadioFormat} from './SettingsRadio';\r\n\r\n\r\nconst PositionRadio : React.FunctionComponent<{settings: T.settingsT}> = React.memo(({settings}) => {\r\n    const options=['Top', 'Left', 'Bottom', 'Right'];\r\n    const values=['top', 'left', 'bottom', 'right'];\r\n    const {format} = settings;\r\n    const onChange = (value) => {format.legendPosition = value;};\r\n    return (\r\n        <CommonRadioFormat>\r\n            <SettingsRadio options={options} values={values}\r\n                defaultValue={format.legendPosition}\r\n                onChange={onChange}\r\n            />\r\n        </CommonRadioFormat>\r\n    );\r\n});\r\nconst CalculationRadio : React.FunctionComponent<{settings: T.settingsT}> = React.memo(({settings}) => {\r\n    const options = [\"Adams-Bashforth 5\", \"Forward Euler\", \"Runge-Kutta 2\", \"Runge-Kutta 4\"];\r\n    const values = [0, 1, 2, 3];\r\n    const {calculationSettings} = settings;\r\n    const onChange = (value) => {calculationSettings.calculationMethod = value;};\r\n    return(\r\n        <CommonRadioFormat>\r\n            <SettingsRadio options={options} values={values}\r\n                defaultValue={calculationSettings.calculationMethod}\r\n                onChange={onChange}\r\n            />\r\n        </CommonRadioFormat>\r\n    );\r\n});\r\n\r\ninterface settingsBarProps{\r\n    settings: T.settingsT, updateColors: Function\r\n}\r\nexport class SettingsBarInternal extends React.PureComponent<settingsBarProps>{\r\n    titles : T.collapseTitlesT = [\"Hide: \", \"Show: \"]; // 0: Hide 1: Show\r\n    private forms = Object.freeze({\r\n        graphs : {\r\n            distance : [\r\n                ['min', 'Minimum', 'm'], \r\n                ['max', 'Maximum', 'm'], \r\n                ['stepSize', 'Step Size', 'm']\r\n            ]\r\n        },\r\n        calculations : {\r\n            launchAngle : [\r\n                ['min', 'Minimum', '°'], \r\n                ['max', 'Maximum', '°'], \r\n                ['precision', 'Increment', '°']\r\n            ],\r\n            numericalMethod : [['timeStep', 'Time Step', 's']]\r\n        },\r\n        colors : [\r\n            ['Hue', [['hueMin', 'Min'], ['hueMax', 'Max']]],\r\n\t\t\t['Chroma', [['chromaMin', 'Min'], ['chromaMax', 'Max']]],\r\n\t\t\t['Light', [['lightMin', 'Min'], ['lightMax', 'Max']]],\r\n        ],\r\n        line : [\r\n            ['pointRadius', 'Draw Radius', 'px'], \r\n            ['pointHitRadius', 'Hover Radius', 'px']\r\n        ],\r\n        format : [\r\n            ['rounding', 'Tooltip Rounding', 'dp']\r\n        ]\r\n    });\r\n    private defaultFormStyle = Object.freeze({\r\n        formLabel: {display: \"block ruby\", padding: 0},\r\n        formControl: {minWidth: '50%', maxWidth: '6rem', display: \"inline-flex\"},\r\n        inputGroup: {display: \"inline-flex\"},\r\n        inputGroupAppend: {display: \"inline-block\"},\r\n        formGroup: {display: \"block ruby\", marginBottom: \".5rem\" },\r\n    });\r\n    private generateForms = (forms, target, onChange, sm=4) => {\r\n        const rendered = forms.map((value, i) => {\r\n            return(\r\n                <React.Fragment key={i}>\r\n                    <div>{value[1]}</div>\r\n                    <div>\r\n                        <ParameterForm \r\n                        controlId={value[0]} type=\"number\" \r\n                        onChange={onChange} \r\n                        newValue={String(target[value[0]])} \r\n                        append={value[2]} \r\n                        labelWidth={3} ariaLabel={value[1]}\r\n                        style={this.defaultFormStyle}\r\n                        />\r\n                    </div>\r\n                </React.Fragment>\r\n            );\r\n        });\r\n        const width = (sm / 12) * 100\r\n        return (\r\n            <div className=\"form-wrapper\" style={{gridTemplateColumns: `${width}% ${100-width}%`}}>\r\n                {rendered}\r\n            </div>\r\n        );\r\n    }\r\n    //Line\r\n    private onlineChange = (value: string, id: string) => {\r\n        this.props.settings.line[id] = parseFloat(value);\r\n    }\r\n    private generateLineForms = () => {\r\n        return this.generateForms(\r\n            this.forms.line,\r\n            this.props.settings.line,\r\n            this.onlineChange, \r\n        );\r\n    }\r\n    //Distance Axis\r\n    private handleGraphChange = (value: string, id: string) => {\r\n        var numValue : number | undefined;\r\n        if(value === ''){numValue = undefined;} \r\n        else{numValue = parseFloat(value);}\r\n        this.props.settings.distance[id] = numValue; \r\n    }\r\n    private generateGraphForm = () => {\r\n        return this.generateForms(\r\n            this.forms.graphs.distance, \r\n            this.props.settings.distance, \r\n            this.handleGraphChange\r\n        );\r\n    }\r\n    //Calculations\r\n    private handleCalculationChange = (value: string, id: string) : void | string => {\r\n        const {calculationSettings} = this.props.settings;\r\n        if(value === ''){return 'error';}\r\n        const numValue = parseFloat(value);\r\n        calculationSettings.launchAngle[id] = numValue;\r\n    }\r\n    private generateLaunchAngleForm = () => {\r\n        return this.generateForms(\r\n            this.forms.calculations.launchAngle, \r\n            this.props.settings.calculationSettings.launchAngle, \r\n            this.handleCalculationChange\r\n        );\r\n    }\r\n    private handleNumericalMethodChange = (value: string, id: string) : void | string => {\r\n        const {calculationSettings} = this.props.settings;\r\n        if(value === ''){return 'error';}\r\n        const numValue = parseFloat(value);\r\n        if(id === 'timeStep'){\r\n            if(numValue <= 0){return 'error';}\r\n            calculationSettings.timeStep = numValue;\r\n        }\r\n    }\r\n    private generateNumericalMethodForm = () => {\r\n        return this.generateForms(\r\n            this.forms.calculations.numericalMethod, \r\n            this.props.settings.calculationSettings, \r\n            this.handleNumericalMethodChange\r\n        );\r\n    }\r\n\r\n    //Format\r\n    private handleRoundingChange = (value: string, id: string) : void | string => {\r\n        let numValue : number | null = parseInt(value);\r\n        if(numValue < 0){return 'error';} if(value === ''){numValue = null;}\r\n        this.props.settings.format.rounding = numValue; \r\n    } \r\n    private generateFormatForms = () => {\r\n        return this.generateForms(\r\n            this.forms.format, \r\n            this.props.settings.format, \r\n            this.handleRoundingChange\r\n        );\r\n    }\r\n\r\n    private onShortNameChange = (checked) => {this.props.settings.format.shortNames = checked;}\r\n    private onShowLineChange = (checked) => {\r\n        //this.props.settings.format.showLine = event.target.checked;\r\n        this.props.settings.line.showLine = checked;\r\n        //console.log(event);\r\n    }\r\n    //----Color\r\n    private handleColorChange = (value: string, id: string) : void | string => {\r\n        if(value === ''){return 'error';}\r\n        const numValues = parseFloat(value);\r\n        //if(numValues > 1 || numValues < 0){return 'error';}\r\n        this.props.settings.format.colors[id] = numValues;\r\n        this.props.updateColors();\r\n    }\r\n    private generateColorFormsInternal = () => {\r\n        const addForm = () => {\r\n            const singleRow = (rowGroup : any, j) => {\r\n                const rowLabel = rowGroup[0], row = rowGroup[1];\r\n                const singleForm = (form, i) => {\r\n                    const id = form[0], label = form[1];\r\n                    return(\r\n                        <div className=\"color-box\" key={i}>\r\n                            <ParameterForm\r\n                                controlId={id} \r\n                                ariaLabel={`${label} ${rowLabel}`} \r\n                                type=\"number\" \r\n                                newValue={String(this.props.settings.format.colors[id])} \r\n                                onChange={this.handleColorChange} \r\n                                labelWidth={0}\r\n                                style={this.defaultFormStyle}\r\n                            />\r\n                        </div>\r\n                    );\r\n                }\r\n                return (\r\n                    <React.Fragment key={j}>\r\n                        <div className=\"color-box\">\r\n                            {rowLabel}\r\n                        </div>\r\n                        {row.map(singleForm)}\r\n                    </React.Fragment>\r\n                );\r\n            }\r\n            return this.forms.colors.map(singleRow);\r\n        }\r\n        return () => {\r\n            return (\r\n                <div className=\"color-wrapper\">\r\n                    <div className=\"color-box\"/>\r\n                    <div className=\"color-box\">Minimum</div>\r\n                    <div className=\"color-box\">Maximum</div>\r\n                    {addForm()}\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n    private generateColorForms = this.generateColorFormsInternal();\r\n    render(){\r\n        const {settings} = this.props, {format} = settings;\r\n        return(\r\n        <div className=\"settings\">\r\n            <div className=\"graph-region\">\r\n                <div className=\"graph-title\">\r\n                    <h3>Graphs</h3>\r\n                </div>\r\n                <div className=\"content-box\">\r\n                    <h4>Line</h4>\r\n                    <BootstrapSwitchButton \r\n                        style='switch-toggle'\r\n                        onlabel='Show Line' \r\n                        offlabel='Show Point' \r\n                        onstyle='success' \r\n                        offstyle='danger'\r\n                        onChange={this.onShowLineChange} \r\n                        checked={settings.line.showLine}\r\n                    />\r\n                    <h5>Point</h5>\r\n                    {this.generateLineForms()}\r\n                </div>\r\n                <div className=\"content-box\">\r\n                    <h4>Labeling</h4>\r\n                    <BootstrapSwitchButton \r\n                        style='switch-toggle'\r\n                        onlabel='Short Names' \r\n                        offlabel='Long Names' \r\n                        onstyle='success' \r\n                        offstyle='danger'\r\n                        onChange={this.onShortNameChange} \r\n                        checked={format.shortNames}\r\n                    />                \r\n                    {this.generateFormatForms()}\r\n                </div>\r\n                <div className=\"content-box\">\r\n                    <h4>Legend Position</h4>\r\n                    <PositionRadio settings={settings}/>\r\n                </div>\r\n                <div className=\"content-box\">\r\n                    <h4>Range Axis</h4>\r\n                    {this.generateGraphForm()}\r\n                </div>\r\n                <div className=\"content-box\">\r\n                    <h4>Color Generation</h4>\r\n                    {this.generateColorForms()}\r\n                </div>\r\n            </div>\r\n            <div className=\"calc-region\">\r\n                <div className=\"calc-title\">\r\n                    <h3>Calculations</h3>\r\n                </div>\r\n                <div className=\"content-box\">\r\n                    <h4>Launch Angle</h4>\r\n                    {this.generateLaunchAngleForm()}\r\n                </div>\r\n                <div className=\"content-box\">\r\n                    <h4>Numerical Analysis</h4>\r\n                    <CalculationRadio settings={settings}/>\r\n                    {this.generateNumericalMethodForm()}\r\n                </div>\r\n            </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SettingsBarInternal;"],"sourceRoot":""}