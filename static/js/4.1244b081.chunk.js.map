{"version":3,"sources":["../node_modules/react-bootstrap/esm/ButtonGroup.js","../node_modules/react-bootstrap/esm/ToggleButton.js","../node_modules/react-bootstrap/esm/ToggleButtonGroup.js","../node_modules/react-bootstrap/esm/ElementChildren.js","components/SettingsBar/SettingsRadio.tsx","components/SettingsBar/SettingsBarInternal.tsx"],"names":["ButtonGroup","React","forwardRef","props","ref","bsPrefix","size","toggle","vertical","className","_props$as","as","Component","rest","_objectWithoutPropertiesLoose","prefix","useBootstrapPrefix","baseClass","createElement","_extends","classNames","displayName","defaultProps","role","noop","ToggleButton","_ref","children","name","checked","type","onChange","value","disabled","inputRef","_useState","useState","focused","setFocused","handleFocus","useCallback","e","target","tagName","handleBlur","Button","active","autoComplete","onFocus","onBlur","ToggleButtonGroup","_useUncontrolled","useUncontrolled","controlledProps","getValues","concat","invariant","func","index","Children","map","child","isValidElement","values","_child$props","childVal","childOnChange","cloneElement","indexOf","chainFunction","inputVal","event","isActive","filter","n","handleToggle","SettingsRadio","memo","options","defaultValue","setValue","onChangeInternal","parseInt","option","i","key","variant","CommonRadioFormat","Row","style","paddingLeft","paddingRight","paddingBottom","Col","sm","PositionRadio","format","settings","legendPosition","CalculationRadio","calculationSettings","calculationMethod","SettingsBarInternal","titles","forms","Object","freeze","graphs","distance","calculations","launchAngle","numericalMethod","colors","line","defaultFormStyle","formLabel","display","padding","formControl","minWidth","maxWidth","inputGroup","inputGroupAppend","formGroup","marginBottom","generateForms","rendered","controlId","newValue","String","append","labelWidth","ariaLabel","width","gridTemplateColumns","onlineChange","id","parseFloat","generateLineForms","handleGraphChange","numValue","undefined","generateGraphForm","handleCalculationChange","generateLaunchAngleForm","handleNumericalMethodChange","timeStep","generateNumericalMethodForm","handleRoundingChange","rounding","generateFormatForms","onShortNameChange","shortNames","onShowLineChange","showLine","handleColorChange","numValues","updateColors","generateColorFormsInternal","rowGroup","rowLabel","row","form","label","generateColorForms","this","onlabel","offlabel","onstyle","offstyle","PureComponent"],"mappings":"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","file":"static/js/4.1244b081.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar defaultProps = {\n  vertical: false,\n  toggle: false,\n  role: 'group'\n};\nvar ButtonGroup = React.forwardRef(function (props, ref) {\n  var bsPrefix = props.bsPrefix,\n      size = props.size,\n      toggle = props.toggle,\n      vertical = props.vertical,\n      className = props.className,\n      _props$as = props.as,\n      Component = _props$as === void 0 ? 'div' : _props$as,\n      rest = _objectWithoutPropertiesLoose(props, [\"bsPrefix\", \"size\", \"toggle\", \"vertical\", \"className\", \"as\"]);\n\n  var prefix = useBootstrapPrefix(bsPrefix, 'btn-group');\n  var baseClass = prefix;\n  if (vertical) baseClass = prefix + \"-vertical\";\n  return /*#__PURE__*/React.createElement(Component, _extends({}, rest, {\n    ref: ref,\n    className: classNames(className, baseClass, size && prefix + \"-\" + size, toggle && prefix + \"-toggle\")\n  }));\n});\nButtonGroup.displayName = 'ButtonGroup';\nButtonGroup.defaultProps = defaultProps;\nexport default ButtonGroup;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React, { useState, useCallback } from 'react';\nimport Button from './Button';\n\nvar noop = function noop() {};\n\nvar ToggleButton = React.forwardRef(function (_ref, ref) {\n  var children = _ref.children,\n      name = _ref.name,\n      className = _ref.className,\n      checked = _ref.checked,\n      type = _ref.type,\n      onChange = _ref.onChange,\n      value = _ref.value,\n      disabled = _ref.disabled,\n      inputRef = _ref.inputRef,\n      props = _objectWithoutPropertiesLoose(_ref, [\"children\", \"name\", \"className\", \"checked\", \"type\", \"onChange\", \"value\", \"disabled\", \"inputRef\"]);\n\n  var _useState = useState(false),\n      focused = _useState[0],\n      setFocused = _useState[1];\n\n  var handleFocus = useCallback(function (e) {\n    if (e.target.tagName === 'INPUT') setFocused(true);\n  }, []);\n  var handleBlur = useCallback(function (e) {\n    if (e.target.tagName === 'INPUT') setFocused(false);\n  }, []);\n  return /*#__PURE__*/React.createElement(Button, _extends({}, props, {\n    ref: ref,\n    className: classNames(className, focused && 'focus', disabled && 'disabled'),\n    type: null,\n    active: !!checked,\n    as: \"label\"\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    name: name,\n    type: type,\n    value: value,\n    ref: inputRef,\n    autoComplete: \"off\",\n    checked: !!checked,\n    disabled: !!disabled,\n    onFocus: handleFocus,\n    onBlur: handleBlur,\n    onChange: onChange || noop\n  }), children);\n});\nToggleButton.displayName = 'ToggleButton';\nexport default ToggleButton;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport invariant from 'invariant';\nimport { useUncontrolled } from 'uncontrollable';\nimport chainFunction from './createChainedFunction';\nimport { map } from './ElementChildren';\nimport ButtonGroup from './ButtonGroup';\nimport ToggleButton from './ToggleButton';\nvar defaultProps = {\n  type: 'radio'\n};\nvar ToggleButtonGroup = React.forwardRef(function (props, ref) {\n  var _useUncontrolled = useUncontrolled(props, {\n    value: 'onChange'\n  }),\n      children = _useUncontrolled.children,\n      type = _useUncontrolled.type,\n      name = _useUncontrolled.name,\n      value = _useUncontrolled.value,\n      onChange = _useUncontrolled.onChange,\n      controlledProps = _objectWithoutPropertiesLoose(_useUncontrolled, [\"children\", \"type\", \"name\", \"value\", \"onChange\"]);\n\n  var getValues = function getValues() {\n    return value == null ? [] : [].concat(value);\n  };\n\n  var handleToggle = function handleToggle(inputVal, event) {\n    var values = getValues();\n    var isActive = values.indexOf(inputVal) !== -1;\n\n    if (type === 'radio') {\n      if (!isActive) onChange(inputVal, event);\n      return;\n    }\n\n    if (isActive) {\n      onChange(values.filter(function (n) {\n        return n !== inputVal;\n      }), event);\n    } else {\n      onChange([].concat(values, [inputVal]), event);\n    }\n  };\n\n  !(type !== 'radio' || !!name) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'A `name` is required to group the toggle buttons when the `type` ' + 'is set to \"radio\"') : invariant(false) : void 0;\n  return /*#__PURE__*/React.createElement(ButtonGroup, _extends({}, controlledProps, {\n    ref: ref,\n    toggle: true\n  }), map(children, function (child) {\n    var values = getValues();\n    var _child$props = child.props,\n        childVal = _child$props.value,\n        childOnChange = _child$props.onChange;\n\n    var handler = function handler(e) {\n      return handleToggle(childVal, e);\n    };\n\n    return React.cloneElement(child, {\n      type: type,\n      name: child.name || name,\n      checked: values.indexOf(childVal) !== -1,\n      onChange: chainFunction(childOnChange, handler)\n    });\n  }));\n});\nToggleButtonGroup.defaultProps = defaultProps;\nToggleButtonGroup.Button = ToggleButton;\nexport default ToggleButtonGroup;","import React from 'react';\n/**\n * Iterates through children that are typically specified as `props.children`,\n * but only maps over children that are \"valid elements\".\n *\n * The mapFunction provided index will be normalised to the components mapped,\n * so an invalid component would not increase the index.\n *\n */\n\nfunction map(children, func) {\n  var index = 0;\n  return React.Children.map(children, function (child) {\n    return React.isValidElement(child) ? func(child, index++) : child;\n  });\n}\n/**\n * Iterates through children that are \"valid elements\".\n *\n * The provided forEachFunc(child, index) will be called for each\n * leaf child with the index reflecting the position relative to \"valid components\".\n */\n\n\nfunction forEach(children, func) {\n  var index = 0;\n  React.Children.forEach(children, function (child) {\n    if (React.isValidElement(child)) func(child, index++);\n  });\n}\n\nexport { map, forEach };","import React, {useState} from 'react';\r\nimport {ToggleButtonGroup, ToggleButton, Row, Col} from 'react-bootstrap';\r\n\r\ninterface settingsRadioProps{\r\n    options: string[], values: (string|number)[], defaultValue: string|number, onChange: Function\r\n}\r\n\r\nexport const SettingsRadio: React.FunctionComponent<settingsRadioProps> = React.memo((\r\n    {options, values, defaultValue, onChange} : settingsRadioProps) => {\r\n    const [value, setValue] = useState(() => {\r\n        return values.indexOf(defaultValue)\r\n    });\r\n    const onChangeInternal = event => {\r\n        const value = parseInt(event.target.value);\r\n        setValue(value);\r\n        onChange(values[value]);\r\n    }\r\n    return (\r\n        <ToggleButtonGroup toggle vertical \r\n            type=\"radio\" name=\"radio\" \r\n            value={value}\r\n        >\r\n            {options.map((option, i) => {\r\n                return (\r\n                <ToggleButton key={i} value={i} \r\n                    onChange={onChangeInternal} \r\n                    type=\"radio\" \r\n                    variant=\"secondary\"\r\n                >\r\n                    {option}\r\n                </ToggleButton>);\r\n            })}\r\n        </ToggleButtonGroup>\r\n    ) \r\n});\r\n\r\nexport const CommonRadioFormat = React.memo(({children}) => {\r\n    return(\r\n        <Row className=\"justify-content-md-center\" \r\n        style={{paddingLeft: '1rem', paddingRight: '1rem', paddingBottom: '.5rem'}}>\r\n            <Col sm=\"10\">{children}</Col>\r\n        </Row>\r\n    );\r\n});","import React from 'react';\r\nimport BootstrapSwitchButton from 'bootstrap-switch-button-react';\r\n\r\nimport * as T from '../commonTypes';\r\nimport {ParameterForm} from '../UtilityComponents';\r\nimport {SettingsRadio, CommonRadioFormat} from './SettingsRadio';\r\n\r\n\r\nconst PositionRadio : React.FunctionComponent<{settings: T.settingsT}> = React.memo(({settings}) => {\r\n    const options=['Top', 'Left', 'Bottom', 'Right'];\r\n    const values=['top', 'left', 'bottom', 'right'];\r\n    const {format} = settings;\r\n    const onChange = (value) => {format.legendPosition = value;};\r\n    return (\r\n        <CommonRadioFormat>\r\n            <SettingsRadio options={options} values={values}\r\n                defaultValue={format.legendPosition}\r\n                onChange={onChange}\r\n            />\r\n        </CommonRadioFormat>\r\n    );\r\n});\r\nconst CalculationRadio : React.FunctionComponent<{settings: T.settingsT}> = React.memo(({settings}) => {\r\n    const options = [\"Adams-Bashforth 5\", \"Forward Euler\", \"Runge-Kutta 2\", \"Runge-Kutta 4\"];\r\n    const values = [0, 1, 2, 3];\r\n    const {calculationSettings} = settings;\r\n    const onChange = (value) => {calculationSettings.calculationMethod = value;};\r\n    return(\r\n        <CommonRadioFormat>\r\n            <SettingsRadio options={options} values={values}\r\n                defaultValue={calculationSettings.calculationMethod}\r\n                onChange={onChange}\r\n            />\r\n        </CommonRadioFormat>\r\n    );\r\n});\r\n\r\ninterface settingsBarProps{\r\n    settings: T.settingsT, updateColors: Function\r\n}\r\nexport class SettingsBarInternal extends React.PureComponent<settingsBarProps>{\r\n    titles : T.collapseTitlesT = [\"Hide: \", \"Show: \"]; // 0: Hide 1: Show\r\n    private forms = Object.freeze({\r\n        graphs : {\r\n            distance : [\r\n                ['min', 'Minimum', 'm'], \r\n                ['max', 'Maximum', 'm'], \r\n                ['stepSize', 'Step Size', 'm']\r\n            ]\r\n        },\r\n        calculations : {\r\n            launchAngle : [\r\n                ['min', 'Minimum', '°'], \r\n                ['max', 'Maximum', '°'], \r\n                ['precision', 'Increment', '°']\r\n            ],\r\n            numericalMethod : [['timeStep', 'Time Step', 's']]\r\n        },\r\n        colors : [\r\n            ['Hue', [['hueMin', 'Min'], ['hueMax', 'Max']]],\r\n\t\t\t['Chroma', [['chromaMin', 'Min'], ['chromaMax', 'Max']]],\r\n\t\t\t['Light', [['lightMin', 'Min'], ['lightMax', 'Max']]],\r\n        ],\r\n        line : [\r\n            ['pointRadius', 'Draw Radius', 'px'], \r\n            ['pointHitRadius', 'Hover Radius', 'px']\r\n        ],\r\n        format : [\r\n            ['rounding', 'Tooltip Rounding', 'dp']\r\n        ]\r\n    });\r\n    private defaultFormStyle = Object.freeze({\r\n        formLabel: {display: \"block ruby\", padding: 0},\r\n        formControl: {minWidth: '50%', maxWidth: '5.5rem', display: \"inline-flex\"},\r\n        inputGroup: {display: \"inline-flex\"},\r\n        inputGroupAppend: {display: \"inline-block\"},\r\n        formGroup: {display: \"block ruby\", marginBottom: \".5rem\" },\r\n    });\r\n    private generateForms = (forms, target, onChange, sm=4) => {\r\n        const rendered = forms.map((value, i) => {\r\n            return(\r\n                <>\r\n                    <div>{value[1]}</div>\r\n                    <div>\r\n                        <ParameterForm \r\n                        controlId={value[0]} type=\"number\" \r\n                        onChange={onChange} \r\n                        newValue={String(target[value[0]])} \r\n                        append={value[2]} \r\n                        labelWidth={3} ariaLabel={value[1]}\r\n                        style={this.defaultFormStyle}\r\n                        />\r\n                    </div>\r\n                </>\r\n            );\r\n        });\r\n        const width = (sm / 12) * 100\r\n        return (\r\n            <div className=\"form-wrapper\" style={{gridTemplateColumns: `${width}% ${100-width}%`}}>\r\n                {rendered}\r\n            </div>\r\n        );\r\n    }\r\n    //Line\r\n    private onlineChange = (value: string, id: string) => {\r\n        this.props.settings.line[id] = parseFloat(value);\r\n    }\r\n    private generateLineForms = () => {\r\n        return this.generateForms(\r\n            this.forms.line,\r\n            this.props.settings.line,\r\n            this.onlineChange, \r\n        );\r\n    }\r\n    //Distance Axis\r\n    private handleGraphChange = (value: string, id: string) => {\r\n        var numValue : number | undefined;\r\n        if(value === ''){numValue = undefined;} \r\n        else{numValue = parseFloat(value);}\r\n        this.props.settings.distance[id] = numValue; \r\n    }\r\n    private generateGraphForm = () => {\r\n        return this.generateForms(\r\n            this.forms.graphs.distance, \r\n            this.props.settings.distance, \r\n            this.handleGraphChange\r\n        );\r\n    }\r\n    //Calculations\r\n    private handleCalculationChange = (value: string, id: string) : void | string => {\r\n        const {calculationSettings} = this.props.settings;\r\n        if(value === ''){return 'error';}\r\n        const numValue = parseFloat(value);\r\n        calculationSettings.launchAngle[id] = numValue;\r\n    }\r\n    private generateLaunchAngleForm = () => {\r\n        return this.generateForms(\r\n            this.forms.calculations.launchAngle, \r\n            this.props.settings.calculationSettings.launchAngle, \r\n            this.handleCalculationChange\r\n        );\r\n    }\r\n    private handleNumericalMethodChange = (value: string, id: string) : void | string => {\r\n        const {calculationSettings} = this.props.settings;\r\n        if(value === ''){return 'error';}\r\n        const numValue = parseFloat(value);\r\n        if(id === 'timeStep'){\r\n            if(numValue <= 0){return 'error';}\r\n            calculationSettings.timeStep = numValue;\r\n        }\r\n    }\r\n    private generateNumericalMethodForm = () => {\r\n        return this.generateForms(\r\n            this.forms.calculations.numericalMethod, \r\n            this.props.settings.calculationSettings, \r\n            this.handleNumericalMethodChange\r\n        );\r\n    }\r\n\r\n    //Format\r\n    private handleRoundingChange = (value: string, id: string) : void | string => {\r\n        let numValue : number | null = parseInt(value);\r\n        if(numValue < 0){return 'error';} if(value === ''){numValue = null;}\r\n        this.props.settings.format.rounding = numValue; \r\n    } \r\n    private generateFormatForms = () => {\r\n        return this.generateForms(\r\n            this.forms.format, \r\n            this.props.settings.format, \r\n            this.handleRoundingChange\r\n        );\r\n    }\r\n\r\n    private onShortNameChange = (checked) => {this.props.settings.format.shortNames = checked;}\r\n    private onShowLineChange = (checked) => {\r\n        //this.props.settings.format.showLine = event.target.checked;\r\n        this.props.settings.line.showLine = checked;\r\n        //console.log(event);\r\n    }\r\n    //----Color\r\n    private handleColorChange = (value: string, id: string) : void | string => {\r\n        if(value === ''){return 'error';}\r\n        const numValues = parseFloat(value);\r\n        //if(numValues > 1 || numValues < 0){return 'error';}\r\n        this.props.settings.format.colors[id] = numValues;\r\n        this.props.updateColors();\r\n    }\r\n    private generateColorFormsInternal = () => {\r\n        const addForm = () => {\r\n            const singleRow = (rowGroup : any) => {\r\n                const rowLabel = rowGroup[0], row = rowGroup[1];\r\n                const singleForm = (form) => {\r\n                    const id = form[0], label = form[1];\r\n                    return(\r\n                        <div className=\"color-box\">\r\n                            <ParameterForm\r\n                                controlId={id} \r\n                                ariaLabel={`${label} ${rowLabel}`} \r\n                                type=\"number\" \r\n                                newValue={String(this.props.settings.format.colors[id])} \r\n                                onChange={this.handleColorChange} \r\n                                labelWidth={0}\r\n                                style={this.defaultFormStyle}\r\n                            />\r\n                        </div>\r\n                    );\r\n                }\r\n                return (\r\n                    <>\r\n                        <div className=\"color-box\">\r\n                            {rowLabel}\r\n                        </div>\r\n                        {row.map(singleForm)}\r\n                    </>\r\n                );\r\n            }\r\n            return this.forms.colors.map(singleRow);\r\n        }\r\n        const run = () => {\r\n            return (<>\r\n                <div className=\"color-wrapper\">\r\n                    <div className=\"color-box\"/>\r\n                    <div className=\"color-box\">Minimum</div>\r\n                    <div className=\"color-box\">Maximum</div>\r\n                    {addForm()}\r\n                </div>\r\n            </>)\r\n        }\r\n        return run;\r\n    }\r\n    private generateColorForms = this.generateColorFormsInternal();\r\n    render(){\r\n        const {settings} = this.props, {format} = settings;\r\n        return(\r\n    <>\r\n        <div className=\"settings\">\r\n            <div className=\"graph-region\">\r\n                <div className=\"graph-title\">\r\n                    <h3>Graphs</h3>\r\n                </div>\r\n                <div className=\"content-box\">\r\n                    <h4>Line</h4>\r\n                    <BootstrapSwitchButton \r\n                        style='switch-toggle'\r\n                        onlabel='Show Line' \r\n                        offlabel='Show Point' \r\n                        onstyle='success' \r\n                        offstyle='danger'\r\n                        onChange={this.onShowLineChange} \r\n                        checked={settings.line.showLine}\r\n                    />\r\n                    <h5>Point</h5>\r\n                    {this.generateLineForms()}\r\n                </div>\r\n                <div className=\"content-box\">\r\n                    <h4>Labeling</h4>\r\n                    <BootstrapSwitchButton \r\n                        style='switch-toggle'\r\n                        onlabel='Short Names' \r\n                        offlabel='Long Names' \r\n                        onstyle='success' \r\n                        offstyle='danger'\r\n                        onChange={this.onShortNameChange} \r\n                        checked={format.shortNames}\r\n                    />                \r\n                    {this.generateFormatForms()}\r\n                </div>\r\n                <div className=\"content-box\">\r\n                    <h4>Legend Position</h4>\r\n                    <PositionRadio settings={settings}/>\r\n                </div>\r\n                <div className=\"content-box\">\r\n                    <h4>Range Axis</h4>\r\n                    {this.generateGraphForm()}\r\n                </div>\r\n                <div className=\"content-box\">\r\n                    <h4>Color Generation</h4>\r\n                    {this.generateColorForms()}\r\n                </div>\r\n            </div>\r\n            <div className=\"calc-region\">\r\n                <div className=\"calc-title\">\r\n                    <h3>Calculations</h3>\r\n                </div>\r\n                <div className=\"content-box\">\r\n                    <h4>Launch Angle</h4>\r\n                    {this.generateLaunchAngleForm()}\r\n                </div>\r\n                <div className=\"content-box\">\r\n                    <h4>Numerical Analysis</h4>\r\n                    <CalculationRadio settings={settings}/>\r\n                    {this.generateNumericalMethodForm()}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SettingsBarInternal;"],"sourceRoot":""}